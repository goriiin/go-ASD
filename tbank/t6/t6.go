package main

import (
	"fmt"
	"time"
)

// Структура для точки
type Point struct {
	x, y int
}

type triangle struct {
	i, j, k int
}

// Проверка на коллинеарность трех точек
func areCollinear(p1, p2, p3 Point) bool {
	return (p2.x-p1.x)*(p3.y-p1.y) == (p3.x-p1.x)*(p2.y-p1.y)
}

// Функция для генерации всех невырожденных треугольников
func generateTriangles(points []Point) []triangle {
	n := len(points)
	var triangles []triangle
	for i := 0; i < n-2; i++ {
		for j := i + 1; j < n-1; j++ {
			for k := j + 1; k < n; k++ {
				if points[i].x == points[j].x && points[i].y == points[j].y {
					continue // Пропускаем совпадающие точки
				}

				counter++
				if !areCollinear(points[i], points[j], points[k]) {
					triangles = append(triangles, triangle{i, j, k})
				}
			}
		}
	}
	return triangles
}

var counter uint64

// Эвристический алгоритм для нахождения максимального количества треугольников
func heuristicMaxTriangles(points []Point) int {
	n := len(points)
	triangles := generateTriangles(points)
	used := make([]bool, n)
	count := 0

	for len(triangles) > 0 {
		// Выбираем первый доступный треугольник
		bestTriangle := -1
		for i, t := range triangles {
			counter++
			if !used[t.i] && !used[t.j] && !used[t.k] {
				bestTriangle = i
				break
			}
		}

		if bestTriangle == -1 {
			break
		}

		// Используем выбранный треугольник
		t := triangles[bestTriangle]
		used[t.i], used[t.j], used[t.k] = true, true, true
		count++

		// Удаляем треугольники, которые используют занятые точки
		var newTriangles []triangle

		for _, tr := range triangles {
			if !used[tr.i] && !used[tr.j] && !used[tr.k] {
				newTriangles = append(newTriangles, tr)
			}

			counter++
		}

		triangles = newTriangles
	}

	return count
}

func main() {
	points := []Point{
		{81, 14},
		{3, 94},
		{35, 31},
		{28, 17},
		{94, 13},
		{86, 94},
		{69, 11},
		{75, 54},
		{4, 3},
		{11, 27},
		{29, 64},
		{77, 3},
		{71, 25},
		{91, 83},
		{89, 69},
		{53, 28},
		{57, 75},
		{35, 0},
		{97, 20},
		{89, 54},
		{43, 35},
		{19, 27},
		{97, 43},
		{13, 11},
		{48, 12},
		{45, 44},
		{77, 33},
		{5, 93},
		{58, 68},
		{15, 48},
		{10, 70},
		{37, 80},
		{79, 46},
		{73, 24},
		{90, 8},
		{5, 84},
		{29, 98},
		{37, 10},
		{29, 12},
		{48, 35},
		{58, 81},
		{46, 20},
		{47, 45},
		{26, 85},
		{34, 89},
		{87, 82},
		{9, 77},
		{81, 21},
		{68, 93},
		{31, 20},
		{59, 48},
		{34, 81},
		{88, 71},
		{28, 87},
		{41, 98},
		{99, 7},
		{29, 4},
		{40, 51},
		{34, 8},
		{27, 72},
		{91, 40},
		{27, 83},
		{63, 50},
		{82, 58},
		{18, 33},
		{17, 31},
		{95, 71},
		{68, 33},
		{95, 74},
		{54, 74},
		{51, 46},
		{28, 17},
		{65, 63},
		{11, 96},
		{6, 14},
		{19, 80},
		{20, 87},
		{54, 76},
		{8, 49},
		{48, 76},
		{59, 67},
		{32, 70},
		{1, 87},
		{92, 14},
		{87, 68},
		{96, 34},
		{98, 82},
		{43, 14},
		{37, 55},
		{20, 58},
		{0, 92},
		{92, 33},
		{64, 97},
		{22, 64},
		{13, 80},
		{38, 81},
		{64, 77},
		{25, 19},
		{47, 97},
		{20, 69},
		{99, 67},
		{0, 76},
		{41, 62},
		{2, 14},
		{46, 39},
		{30, 7},
		{30, 72},
		{10, 10},
		{93, 62},
		{8, 97},
		{68, 98},
		{16, 16},
		{84, 60},
		{70, 21},
		{33, 67},
		{77, 54},
		{27, 69},
		{96, 93},
		{88, 25},
		{91, 39},
		{51, 85},
		{83, 47},
		{56, 66},
		{57, 15},
		{31, 28},
		{8, 43},
		{2, 75},
		{70, 29},
		{75, 28},
		{0, 9},
		{90, 80},
		{7, 29},
		{8, 4},
		{42, 9},
		{65, 30},
		{35, 85},
		{62, 27},
		{69, 16},
		{92, 73},
		{73, 60},
		{31, 100},
		{60, 52},
		{24, 12},
		{12, 84},
		{55, 45},
		{54, 52},
		{59, 93},
		{6, 86},
		{83, 82},
		{12, 7},
		{51, 93},
		{43, 13},
		{31, 24},
		{24, 68},
		{57, 17},
		{54, 23},
		{35, 59},
		{31, 9},
		{56, 70},
		{12, 6},
		{83, 69},
		{1, 11},
		{96, 30},
		{21, 52},
		{62, 61},
		{27, 51},
		{7, 21},
		{48, 0},
		{49, 33},
		{100, 100},
		{58, 36},
		{54, 89},
		{93, 100},
		{71, 84},
		{91, 62},
		{19, 24},
		{37, 27},
		{7, 74},
		{94, 69},
		{7, 95},
		{40, 7},
		{6, 74},
		{61, 64},
		{67, 20},
		{7, 65},
		{10, 23},
		{8, 76},
		{8, 86},
		{30, 51},
		{15, 72},
		{31, 74},
		{76, 5},
		{79, 10},
		{53, 84},
		{74, 72},
		{66, 40},
		{33, 26},
		{85, 91},
		{40, 30},
		{33, 50},
		{16, 85},
		{82, 38},
		{58, 40},
		{96, 9},
		{1, 58},
		{79, 72},
		{12, 9},
		{68, 27},
		{64, 33},
		{16, 44},
		{8, 31},
		{47, 36},
		{20, 56},
		{69, 90},
		{38, 78},
		{83, 67},
		{1, 85},
		{70, 38},
		{84, 13},
		{17, 33},
		{14, 13},
		{95, 70},
		{19, 34},
		{36, 77},
		{26, 91},
		{43, 26},
		{87, 81},
		{33, 64},
		{62, 32},
		{6, 11},
		{81, 54},
		{35, 5},
		{0, 42},
		{98, 16},
		{81, 33},
		{20, 94},
		{56, 70},
		{90, 54},
		{71, 1},
		{14, 9},
		{88, 19},
		{69, 4},
		{47, 74},
		{70, 18},
		{55, 16},
		{5, 39},
		{46, 5},
		{45, 26},
		{87, 31},
		{85, 13},
		{45, 99},
		{71, 52},
		{79, 95},
		{19, 30},
		{20, 22},
		{52, 3},
		{22, 94},
		{42, 100},
		{52, 85},
		{94, 31},
		{34, 20},
		{100, 89},
		{13, 48},
		{4, 60},
		{28, 25},
		{58, 44},
		{39, 29},
		{28, 3},
		{84, 24},
		{51, 42},
		{35, 8},
		{98, 35},
		{44, 82},
		{65, 51},
		{86, 68},
		{42, 3},
		{14, 33},
		{22, 74},
		{33, 4},
		{13, 76},
		{55, 44},
		{93, 100},
		{40, 55},
		{77, 65},
		{14, 49},
		{73, 24},
		{32, 5},
		{90, 55},
		{0, 66},
		{68, 87},
		{92, 94},
		{94, 85},
		{25, 46},
		{55, 8},
		{85, 42},
		{79, 40},
		{84, 15},
		{92, 38},
		{64, 39},
		{85, 52},
	}

	t := time.Now()
	// Находим максимальное количество треугольников
	maxTri := heuristicMaxTriangles(points)
	fmt.Println(time.Since(t).Seconds(), counter)

	// Выводим результат
	fmt.Printf("Максимальное количество треугольников: %d\n", maxTri)
}
